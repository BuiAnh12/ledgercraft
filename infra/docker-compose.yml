services:
  # Docker for 
  oltp-postgres:
    image: postgres:16-alpine
    container_name: lc-oltp-postgres
    environment:
      POSTGRES_DB: ${OLTP_DB}
      POSTGRES_USER: ${OLTP_USER}
      POSTGRES_PASSWORD: ${OLTP_PASSWORD}
    ports:
      - "${OLTP_PORT}:5432"
    volumes:
      - oltp_pgdata:/var/lib/postgresql/data
      - ../:/app
    command: # Setup WAL for PG with enough repl slot & sender to Debezium
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=10"
      - "-c"
      - "max_replication_slots=10"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${OLTP_USER} -d ${OLTP_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10
  # Docker for data warehouse (DWH) PostgreSQL service
  dwh-postgres:
    image: postgres:16-alpine
    container_name: lc-dwh-postgres
    environment:
      POSTGRES_DB: ${DWH_DB}
      POSTGRES_USER: ${DWH_USER}
      POSTGRES_PASSWORD: ${DWH_PASSWORD}
    ports:
      - "${DWH_PORT}:5432"
    volumes:
      - dwh_pgdata:/var/lib/postgresql/data
      - ../:/app

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DWH_USER} -d ${DWH_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: lc-redis
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  # (Optional) DB UI for quick inspection
  adminer:
    image: adminer:4
    container_name: lc-adminer
    ports:
      - "8081:8080"
    depends_on:
      - oltp-postgres
      - dwh-postgres
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: lc-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: lc-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Two listeners: one for containers (kafka:9092), one for host (localhost:29092)
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:${KAFKA_BROKER_HOST_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    ports:
      - "${KAFKA_BROKER_HOST_PORT}:29092"
      - "9092:9092"  # internal; useful for container-to-container tools

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    container_name: lc-schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    ports:
      - "${SCHEMA_REGISTRY_HOST_PORT}:8081"

  kafka-connect:
    # Debezium's Connect image includes Debezium connectors; we'll start with JSON converters.
    image: debezium/connect:2.7.0.Final
    container_name: lc-kafka-connect
    depends_on:
      - kafka
      - schema-registry
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_status
      # Use JSON for simplicity first; Avro switch later by setting these to AvroConverter + SCHEMA_REGISTRY_URL
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "true"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      # REST
      REST_ADVERTISED_HOST_NAME: kafka-connect
      REST_PORT: 8083
    ports:
      - "${KAFKA_CONNECT_HOST_PORT}:8083"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: lc-kafka-ui
    depends_on:
      - kafka
      - schema-registry
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    ports:
      - "${KAFKA_UI_HOST_PORT}:8080"
  stream:
    image: python:3.11-slim
    container_name: lc-stream
    working_dir: /app/services/stream
    # command: bash -lc "pip install -r requirements.txt && faust -A faust_app worker -l info"
    command: bash -lc "pip install -r requirements.txt && faust -A faust_app worker -l debug"
        
    env_file:
      - ../.env
    environment:
      KAFKA_BROKER_URL: kafka://kafka:9092
      OLTP_HOST: oltp-postgres
      OLTP_PORT: ${OLTP_PORT}
      OLTP_DB: ${OLTP_DB}
      OLTP_USER: ${OLTP_USER}
      OLTP_PASSWORD: ${OLTP_PASSWORD}
      VELOCITY_WINDOW_SECONDS: 300
      VELOCITY_COUNT_THRESHOLD: 5
      VELOCITY_SUM_THRESHOLD_VND: 2000000
      VELOCITY_SUM_THRESHOLD_USD: 100
    depends_on:
      - kafka
      - oltp-postgres
    volumes:
      - ../:/app
  airflow-postgres:
    image: postgres:16-alpine
    container_name: lc-airflow-postgres
    environment:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
    volumes:
      - airflow_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 3s
      retries: 10

  airflow-init:
    image: apache/airflow:2.9.2
    depends_on:
      - airflow-postgres
    entrypoint: /bin/bash
    env_file:
      - ../.env
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW_GID: ${AIRFLOW_GID}
    volumes:
      - ../pipelines/airflow/dags:/opt/airflow/dags
      - ../pipelines/airflow/logs:/opt/airflow/logs
      - ../pipelines/airflow/plugins:/opt/airflow/plugins
    command: >
      -c "pip install apache-airflow-providers-postgres==5.8.0 psycopg2-binary==2.9.9 &&
          airflow db init &&
          airflow users create --role Admin --username admin --password admin --firstname Admin --lastname User --email admin@example.com &&
          airflow connections add oltp_postgres --conn-uri 'postgres://${OLTP_USER}:${OLTP_PASSWORD}@lc-oltp-postgres:5432/${OLTP_DB}' &&
          airflow connections add dwh_postgres  --conn-uri 'postgres://${DWH_USER}:${DWH_PASSWORD}@lc-dwh-postgres:5432/${DWH_DB}'"

  airflow-webserver:
    image: apache/airflow:2.9.2
    container_name: lc-airflow-web
    depends_on:
      - airflow-postgres
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW_GID: ${AIRFLOW_GID}
    command: webserver
    ports:
      - "${AIRFLOW_WEB_PORT}:8080"
    volumes:
      - ../pipelines/airflow/dags:/opt/airflow/dags
      - ../pipelines/airflow/logs:/opt/airflow/logs
      - ../pipelines/airflow/plugins:/opt/airflow/plugins

  airflow-scheduler:
    image: apache/airflow:2.9.2
    container_name: lc-airflow-scheduler
    depends_on:
      - airflow-postgres
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW_GID: ${AIRFLOW_GID}
    command: scheduler
    volumes:
      - ../pipelines/airflow/dags:/opt/airflow/dags
      - ../pipelines/airflow/logs:/opt/airflow/logs
      - ../pipelines/airflow/plugins:/opt/airflow/plugins

  airflow-triggerer:
    image: apache/airflow:2.9.2
    container_name: lc-airflow-triggerer
    depends_on:
      - airflow-postgres
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW_GID: ${AIRFLOW_GID}
    command: triggerer
    volumes:
      - ../pipelines/airflow/dags:/opt/airflow/dags
      - ../pipelines/airflow/logs:/opt/airflow/logs
      - ../pipelines/airflow/plugins:/opt/airflow/plugins

volumes:
  oltp_pgdata:
  dwh_pgdata:
  airflow_db:
